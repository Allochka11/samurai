{"version":3,"file":"static/js/168.fa4b2775.chunk.js","mappings":"mLAOaA,EAAU,SAACC,GAEpB,OACIC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,OAAAC,SAAMF,EAAMG,WAGxB,ECbA,EAA0B,yBAA1B,EAAmE,+BAAnE,EAA4J,sB,UCO/IC,EAAa,SAACJ,GAEvB,IAAIK,EAAI,YAAAC,OAAeN,EAAMO,IAC7B,OACIN,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACO,EAAAA,GAAO,CAACC,GAAIJ,EAAKH,SAAEF,EAAMU,QAGtC,E,uCCNMC,GAAeC,EAAAA,EAAAA,GAAiB,KAqBzBC,GAAsBC,EAAAA,EAAAA,GAA+B,CAC9DC,KAAM,kBADyBD,EAnBsC,SAACd,GAEtE,OACIgB,EAAAA,EAAAA,MAAA,QAAMC,SAAUjB,EAAMkB,aAAahB,SAAA,EAC/BD,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACT,KAAM,iBACNU,YAAa,qBACbC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUb,QAIhCV,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,UAAQwB,KAAM,SAASvB,SAAC,aAIxC,I,8BCYA,GADyBwB,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,KAjBrB,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAME,eACnBC,OAAQH,EAAMI,KAAKD,OAEvB,IACyB,SAACE,GACxB,MAAO,CAILC,YAAa,SAACC,GACZF,GAASG,EAAAA,EAAAA,IAAyBD,GACpC,EAEJ,IAEyFE,EAAAA,EAAhEX,ECjCF,SAAC1B,GAGpB,IAAI4B,EAAQ5B,EAAM6B,YAGdS,EAAkBV,EAAMW,QAAQC,KAAI,SAACC,GAAE,OAAKxC,EAAAA,EAAAA,KAACG,EAAU,CAAaM,KAAM+B,EAAG/B,KAAMH,GAAIkC,EAAGlC,IAA7BkC,EAAGlC,GAA+B,IAG/FmC,EAAmBd,EAAMe,SAASH,KAAI,SAACC,GAAE,OAAKxC,EAAAA,EAAAA,KAACF,EAAO,CAAaI,QAASsC,EAAGtC,QAASI,GAAIkC,EAAGlC,IAAnCkC,EAAGlC,GAAqC,IAWxG,OACIN,EAAAA,EAAAA,KAAA,OAAAC,UACIc,EAAAA,EAAAA,MAAA,OAAK4B,UAAWC,EAAU3C,SAAA,EACtBD,EAAAA,EAAAA,KAAA,OAAK2C,UAAWC,EAAgB3C,SAC3BoC,KAELtB,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACID,EAAAA,EAAAA,KAAA,OAAAC,SAAMwC,KACNzC,EAAAA,EAAAA,KAAA,OAAK2C,UAAWC,EAAO3C,UACnBD,EAAAA,EAAAA,KAACY,EAAmB,CAACI,SAb1B,SAAC6B,GACZ9C,EAAMkC,YAAYY,EAASX,eAC/B,aAmBJ,G","sources":["components/Dialogs/Message/Message.tsx","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["import React from \"react\";\n\ntype MessagePropsType = {\n    message: string\n    id: number\n}\n\nexport const Message = (props: MessagePropsType) => {\n\n    return (\n        <div>\n            <div>{props.message}</div>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogs__item\":\"Dialogs_dialogs__item__QQn7e\",\"dialogs__header\":\"Dialogs_dialogs__header__1rUoI\",\"send\":\"Dialogs_send__FRFsR\"};","import {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\n\nexport const DialogItem = (props: DialogItemPropsType) => {\n    // console.log(props, 'DialogItem')\n    let path = `/dialogs/${props.id}`;\n    return (\n        <div>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {Textarea} from \"../common/FormControls/FormControls\";\n\n\nexport type MessageFormDataType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={'newMessageBody'}\n                       placeholder={'Enter your message'}\n                       component={Textarea}\n                       validate={[required, maxLength100]}\n\n                />\n            </div>\n            <div>\n                <button type={\"submit\"}>send</button>\n            </div>\n        </form>\n    )\n};\n\nexport const AddMessageReduxForm = reduxForm<MessageFormDataType>({\n    form: 'addMessageForm'\n})(AddMessageForm)","import {\n  MessagesPagePropsType,\n  sendMessageActionCreator,\n  // updateNewMessageBodyActionCreator\n} from \"../../redux/message-reducer\";\nimport { Dialogs } from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AppRootStateType } from \"../../redux/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport React from \"react\";\n\ntype MapStatePropsType = {\n  dialogsPage: MessagesPagePropsType;\n  isAuth: boolean;\n};\ntype MapDispatchPropsType = {\n  // updateNewMessageBody: (body: string) => void\n  sendMessage: (newMessageBody: string) => void;\n};\n\nexport type DialogsPropsTypes = MapStatePropsType & MapDispatchPropsType;\n\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n  return {\n    dialogsPage: state.messageReducer,\n    isAuth: state.auth.isAuth,\n  };\n};\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n  return {\n    // updateNewMessageBody: (body: string) => {\n    //     dispatch(updateNewMessageBodyActionCreator(body))\n    // },\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageActionCreator(newMessageBody));\n    },\n  };\n};\n\nconst DialogsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\nexport default DialogsContainer;\n\n// export const  withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\n","import React, {ChangeEvent} from 'react';\nimport {Message} from \"./Message/Message\";\nimport s from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {DialogsPropsTypes} from \"./DialogsContainer\";\nimport {AddMessageReduxForm, MessageFormDataType} from \"./AddMessageForm\";\n\nexport const Dialogs = (props: DialogsPropsTypes) => {\n    // console.log(props)\n\n    let state = props.dialogsPage\n\n\n    let dialogsElements = state.dialogs.map((el) => <DialogItem key={el.id} name={el.name} id={el.id}/>\n    );\n\n    let messagesElements = state.messages.map((el) => <Message key={el.id} message={el.message} id={el.id}/>)\n    // let newMessageBody = state.newMessageBody\n\n    // let onNewMessageChange = (el: ChangeEvent<HTMLTextAreaElement>) => {\n    //     // let body = el.target.value;\n    //     // props.updateNewMessageBody(body)\n    // }\n    let onSubmit = (formData: MessageFormDataType) => {\n        props.sendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div>\n            <div className={s.dialogs}>\n                <div className={s.dialogs__item}>\n                    {dialogsElements}\n                </div>\n                <div>\n                    <div>{messagesElements}</div>\n                    <div className={s.send}>\n                        <AddMessageReduxForm onSubmit={onSubmit}/>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n"],"names":["Message","props","_jsx","children","message","DialogItem","path","concat","id","NavLink","to","name","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","type","compose","connect","state","dialogsPage","messageReducer","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","map","el","messagesElements","messages","className","s","formData"],"sourceRoot":""}